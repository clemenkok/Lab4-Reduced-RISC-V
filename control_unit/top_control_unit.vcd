$version Generated by VerilatedVcd $end
$date Sun Nov 20 17:27:39 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  3 & ALUctrl [2:0] $end
  $var wire  1 ' ALUsrc $end
  $var wire  1 $ EQ $end
  $var wire 32 , ImmOp [31:0] $end
  $var wire  8 # PC [7:0] $end
  $var wire  1 ( PCsrc $end
  $var wire  1 % RegWrite $end
  $var wire  5 + rd [4:0] $end
  $var wire  5 ) rs1 [4:0] $end
  $var wire  5 * rs2 [4:0] $end
  $scope module top_control_unit $end
   $var wire 32 / ADDRESS_WIDTH [31:0] $end
   $var wire  3 & ALUctrl [2:0] $end
   $var wire  1 ' ALUsrc $end
   $var wire 32 0 DATA_WIDTH [31:0] $end
   $var wire  1 $ EQ $end
   $var wire 32 , ImmOp [31:0] $end
   $var wire 12 . ImmSrc [11:0] $end
   $var wire  8 # PC [7:0] $end
   $var wire  1 ( PCsrc $end
   $var wire  1 % RegWrite $end
   $var wire 32 - instr [31:0] $end
   $var wire  5 + rd [4:0] $end
   $var wire  5 ) rs1 [4:0] $end
   $var wire  5 * rs2 [4:0] $end
   $scope module my_control_unit $end
    $var wire  3 & ALUctrl [2:0] $end
    $var wire  1 ' ALUsrc $end
    $var wire 32 0 DATA_WIDTH [31:0] $end
    $var wire  1 $ EQ $end
    $var wire 12 . ImmSrc [11:0] $end
    $var wire  1 ( PCsrc $end
    $var wire  1 % RegWrite $end
    $var wire 32 - instr [31:0] $end
   $upscope $end
   $scope module my_instr_mem $end
    $var wire 32 / ADDRESS_WIDTH [31:0] $end
    $var wire 32 0 DATA_WIDTH [31:0] $end
    $var wire  8 # PC [7:0] $end
    $var wire 32 - instr [31:0] $end
   $upscope $end
   $scope module my_sign_extend $end
    $var wire 32 0 DATA_WIDTH [31:0] $end
    $var wire 32 1 IMM_WIDTH [31:0] $end
    $var wire 32 , ImmOp [31:0] $end
    $var wire 12 . ImmSrc [11:0] $end
    $var wire 32 - instr [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000001 #
0$
0%
b000 &
0'
0(
b00000 )
b00000 *
b00000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b000000000000 .
b00000000000000000000000000001000 /
b00000000000000000000000000100000 0
b00000000000000000000000000001100 1
#2
b00000010 #
1%
1'
b01010 +
b00000000000000000000010100010011 -
#4
b00000011 #
b01011 +
b00000000000000000000010110010011 -
#6
b00000100 #
b01011 )
b01010 +
b00000000000001011000010100010011 -
#8
b00000101 #
b00001 *
b01011 +
b00000000000000000000000000000001 ,
b00000000000101011000010110010011 -
b000000000001 .
#10
b00000110 #
0%
b111 &
0'
1(
b00110 *
b11001 +
b00000000000000000000111111111100 ,
b11111110011001011001110011100011 -
b111111111100 .
#12
b00000111 #
b00110 )
b00000 *
b10001 +
b00000000000000000000111111111000 ,
b11111110000000110001100011100011 -
b111111111000 .
#14
b00001000 #
0(
b00000 )
b00000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b000000000000 .
#16
b00001001 #
#18
b00001010 #
#20
b00001011 #
#22
b00001100 #
#24
b00001101 #
#26
b00001110 #
#28
b00001111 #
